#!/bin/bash

# This is the main script of RBS : it will auto-install and configure all programs that I daily use
# Thanks to this webpage (http://xn--rpa.cc/irl/term.html), I'm able to use ANSI escape sequences.

# Is first meant for arch, but will then be extended to void and debian
# To be sure to have no error when shellcheck running:
# shellcheck disable=SC1091

mkdir /tmp/tmprbs >/dev/null 2>&1
username="$(who | cut -d " " -f1)"
dot_repo="temp_dotfiles"
read -rp "Which aurhelper would you like to install (default is yay): " aurhelper
# read -rp "Choose your team: " main_color
[ -z "$aurhelper" ] && aurhelper="yay"

internet()
{
	echo "Testing internet connection..."
	ping -c 2 www.example.com 2>&- >/dev/null || (echo "You're not connected to the internet. Check out that NetworkManager is started" && false)
}

pimp_pacman(){
	grep "^Color" /etc/pacman.conf >/dev/null || sudo sed -i "s/^#Color$/Color/" /etc/pacman.conf
	sudo sed -i "s/-j2/-j$(nproc)/;s/^#MAKEFLAGS/MAKEFLAGS/" /etc/makepkg.conf
}

refresh_keyrings(){
	echo "Refreshing keyrings, and checking for updates..."
	sudo pacman --noconfirm --needed -Syu archlinux-keyring >/dev/null 2>&1
}

add_gpg_keys(){
	echo "Adding extra needed gpg keys..."
	while read -r key ; do
		gpg --keyserver keyserver.ubuntu.com --recv-keys "$key" > /dev/null 2>&1
	done < extra_keys
}

install_yay(){
	[ -f "/usr/bin/$aurhelper" ] || (
	echo "Manually installing ${aurhelper}, this may take several minutes..."
	cd /tmp/tmprbs || exit
	rm -rf /tmp/tmprbs/"$aurhelper"*
	curl -sO https://aur.archlinux.org/cgit/aur.git/snapshot/"$aurhelper".tar.gz &&
	tar -xvf "$aurhelper".tar.gz >/dev/null 2>&1 &&
	cd "$aurhelper" &&
	makepkg --noconfirm -si >/dev/null 2>&1
	cd /tmp/tmprbs || exit)
}

# 3 escape seq meaning: back 12 columns, erase end of line and then write in bold  and green [DONE] and go back to the line
writing_bold_green(){
	printf "\e[12D\e[K\e[1;38;5;48m[DONE]\e[m\n"
}

writing_bold_red(){
	printf "\e[12D\e[K\e[1;38;5;196m[ERROR]\e[m\n"
	echo "$1" >> /tmp/badlist
}

installer(){
	install_mess="Installing $1... "
	printf '%s%*s' "$install_mess" "$((($(tput cols) / 2) - ${#install_mess}))" ""
	printf "[INSTALLING]"
	(sudo pacman --noconfirm --needed -S "$1" >/dev/null 2>&1 && writing_bold_green) || (writing_bold_red "$1" )
}

aur_installer(){
	pacman -Qqm | grep "^$1$" >/dev/null 2>&1 && return
	install_mess="Installing $1... "
	printf '%s%*s' "$install_mess" "$((($(tput cols) / 2) - ${#install_mess}))" ""
	printf "[INSTALLING]"
	($aurhelper --noconfirm --useask -S "$1" >/dev/null 2>&1 && writing_bold_green) || (writing_bold_red "$1")

}

make_git_inst(){
	pname="$(basename "$1")"
	install_mess="Installing ${pname}... "
	printf '%s%*s' "$install_mess" "$((($(tput cols) / 2) - ${#install_mess}))" ""
	printf "[INSTALLING]"
	cd /tmp/tmprbs || exit
	git clone --depth 1 "$1" >/dev/null 2>&1
	cp -rfT "$pname" /home/"${username}"/.config/"${pname}" >/dev/null 2>&1
	cd "$pname" || exit
	make >/dev/null 2>&1
	(sudo make install >/dev/null 2>&1 && writing_bold_green) || (writing_bold_red "$1")
}

install_progs(){
	while IFS=, read -r tag prog _ ; do
		case "$tag" in
			"A") aur_installer "$prog"  ;;
			"G") make_git_inst "$prog"  ;;
			*) installer "$prog"        ;;
		esac
	done < progs.csv
}

manually_inst_dwm(){
	install_mess="Installing dwm... "
	printf '%s%*s' "$install_mess" "$((($(tput cols) / 2) - ${#install_mess}))" ""
	printf "[INSTALLING]"
	cd /tmp/tmprbs || exit
	git clone --depth 1 https://github.com/LukeSmithxyz/dwm >/dev/null 2>&1
	cd dwm || exit
	sed -i "/\/share\/dwm/d" Makefile
	cd ..
	cp -rfT dwm /home/"${username}"/.config/dwm >/dev/null 2>&1
	cd dwm || exit
	make >/dev/null 2>&1
	(sudo make install >/dev/null 2>&1 && writing_bold_green) || writing_bold_red
}

remove_noise(){
	echo "Removing the beep sound..."
	sudo rmmod pcspkr
	echo "blacklist pcspkr" | sudo tee /etc/modprobe.d/nobeep.conf >/dev/null
}

base_dir(){
	echo "Creating some folders..."
	cd /home/"${username}"/ ||exit
	mkdir Dl .Gfre Vids Repos Docs
}

dash_shell(){
	echo "Setting up dash shell..."
	sudo ln -sfT dash /usr/bin/sh
	echo "[Trigger]
Type = Package
Operation = Install
Operation = Upgrade
Target = bash

[Action]
Description = Re-pointing /bin/sh symlink to dash...
When = PostTransaction
Exec = /usr/bin/ln -sfT dash /usr/bin/sh
Depends = dash" | sudo tee /usr/share/libalpm/hooks/sh_relink.hook >/dev/null 2>&1
}

fcron_conf(){
	echo "Setting up fcron"
	sudo systemctl start fcron >/dev/null 2>&1
	sudo systemctl enable fcron >/dev/null 2>&1
	fcrontab - >/dev/null 2>&1 << "EOF"
@ 1w rm -rf $HOME/.Gfre/*
@ 1d update_adblocker
EOF
	sudo fcrontab - >/dev/null 2>&1 << "EOF"
@ 1d reflector --latest 200 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
EOF
}

pacman_statusbar(){
	echo "[Trigger]
Type = Package
Operation = Upgrade
Target = *

[Action]
Description = Updating statusbar...
When = PostTransaction
Exec = /usr/bin/pkill -RTMIN+8 dwmblocks" | sudo tee /usr/share/libalpm/hooks/statusbar.hook >/dev/null 2>&1
}

insert_dotfiles(){
	echo "Inserting and managing dotfiles..."
	cd /tmp/tmprbs || exit
	git clone --depth 1 https://github.com/Rhylx/${dot_repo}  >/dev/null 2>&1
	sudo mv ${dot_repo}/.local/tty_keymap/keymap /usr/share/kbd/keymaps/i386/qwerty/my_custom_keymap.map
	echo "KEYMAP=my_custom_keymap" | sudo tee /etc/vconsole.conf >/dev/null 2>&1
	cp -rfT temp_dotfiles/ /home/"${username}"/ >/dev/null 2>&1
	cd || exit
	sudo rm -rf .git
	rm -f README.md
	mkdir -p /home/"${username}"/.local/share/xorg
	. /etc/X11/xinit/xinitrc.d/50-systemd-user.sh
}

move_gpg(){
	cp -rfT /home/"${username}"/.gnupg /home/"${username}"/.local/gnupg >/dev/null 2>&1
}

well_done(){
	clear
	echo "The installation is finished !!"
	if [ -f /tmp/badlist ]
	then
	(echo -e "Here is the list of the packages that had an error during installation :\n"
	echo -e "\033[1m$(cat /tmp/badlist)\033[0m \n"
	echo "You should try to install those packages manually"
	rm  /tmp/badlist 2>&1)
	else
	(echo "The list is empty, hurray, you have nothing to do but to restart and enjoy your freshly installed usable distro !!:D" ||
	echo -e "You also need to install\033[1m libxft-bgra-git\033[0m manually!")
	fi
	echo "Remember to set passwords if they were set by default !!"
}

clear_tmprbs(){
	sudo rm -rf /tmp/tmprbs >/dev/null 2>&1
	echo "Setting back sudoers to normal..."
	echo "%wheel ALL=(ALL) ALL
%wheel ALL=(ALL) NOPASSWD: /usr/bin/shutdown,/usr/bin/poweroff,/usr/bin/reboot,/usr/bin/systemctl suspend,/usr/bin/mount,/usr/bin/umount,/usr/bin/pacman -Syu,/usr/bin/pacman -Syyu,/usr/bin/systemctl restart NetworkManager,/usr/bin/pacman -Syyu --noconfirm,/usr/bin/loadkeys,/usr/bin/yay
%wheel ALL=(ALL) NOPASSWD: ALL #RBS" | sudo tee -a /etc/sudoers >/dev/null
	sudo sed -i "/#RBS/d" /etc/sudoers
}

remove_all(){
	echo "An error occured, please fix it an rerun the script"
	clear_tmprbs
}



clear ; (internet &&
      pimp_pacman &&
 refresh_keyrings &&
     add_gpg_keys &&
      install_yay &&
    install_progs &&
manually_inst_dwm &&
     remove_noise &&
         base_dir &&
       dash_shell &&
       fcron_conf &&
 pacman_statusbar &&
  insert_dotfiles &&
         move_gpg &&
     clear_tmprbs &&
        well_done) || remove_all

# Main structure of script is finished for arch. Now, there remains to rebuild all soft and config files # and to add then slowly in prog.csv...

## Also to do : adapt this script to void and debian...
