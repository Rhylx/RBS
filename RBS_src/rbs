#!/bin/sh

# This is the main script of RBS : it will auto-install and configure all programs that I daily use
# Thanks to this webpage (http://xn--rpa.cc/irl/term.html), I'm able to use ANSI escape sequences.

# Is first meant for arch, but will then be extended to void and debian
# Goal of this script :
#
# -> Install keyboard layout
# -> Installing dotfiles (which of course need to be reviewed and updated...)
# -> Setup doas (instead of sudo)
# Try to do these steps manually and write it all again...


mkdir /tmp/tmprbs
read -p "Which aurhelper would you like to install (default is yay): " aurhelper


[ -z "$aurhelper" ] && aurhelper="yay"

internet()
{
	echo "Testing internet connection..."
	ping -c 2 www.example.com 2>&- >/dev/null || (echo "You're not connected to the internet. Check out that NetworkManager is started" && false)
}

pimp_pacman(){
	grep "^Color" /etc/pacman.conf >/dev/null || sudo sed -i "s/^#Color$/Color/" /etc/pacman.conf
	sed -i "s/-j2/-j$(nproc)/;s/^#MAKEFLAGS/MAKEFLAGS/" /etc/makepkg.conf
}

refresh_keyrings(){
	echo "Refreshing keyrings..."
	sudo pacman --noconfirm --needed -Sy archlinux-keyring >/dev/null 2>&1
}

install_yay(){
	[ -f "/usr/bin/$aurhelper" ] || (
	echo "Manually installing ${aurhelper},this may take several minutes..."
	cd /tmp/tmprbs
	rm -rf /tmp/tmprbs/"$aurhelper"*
	curl -sO https://aur.archlinux.org/cgit/aur.git/snapshot/"$aurhelper".tar.gz &&
	tar -xvf "$aurhelper".tar.gz >/dev/null 2>&1 &&
	cd "$aurhelper" &&
	makepkg --noconfirm -si >/dev/null 2>&1
	cd /tmp/tmprbs)
}

# 3 escape seq meaning: back 12 columns, erase end of line and then write in bold  and green [DONE] and go back to the line
writing_bold_green(){
	printf "\e[12D\e[K\e[1;38;5;48m[DONE]\e[m\n"
}

writing_bold_red(){
	printf "\e[12D\e[K\e[1;38;5;196m[ERROR]\e[m\n"
}

installer(){
	install_mess="Installing $1... "
	printf '%s%*s' "$install_mess" "$((($(tput cols) / 2) - ${#install_mess}))"
	printf "[INSTALLING]"
	sudo pacman --noconfirm --needed -S "$1" >/dev/null 2>&1 && writing_bold_green || writing_bold_red
}

aur_installer(){
	pacman -Qqm | grep "^$1$" >/dev/null 2>&1 && return
	install_mess="Installing $1... "
	printf '%s%*s' "$install_mess" "$((($(tput cols) / 2) - ${#install_mess}))"
	printf "[INSTALLING]"
	$aurhelper --noconfirm -S "$1" >/dev/null 2>&1 && writing_bold_green || writing_bold_red

}

install_progs(){
	while IFS=, read -r tag prog comment; do
		case "$tag" in
			"A") aur_installer $prog ;;
			*) installer $prog ;;
		esac
	done < progs.csv
}










clear_tmprbs(){
	sudo rm -rf /tmp/tmprbs >/dev/null 2>&1
}


remove_all(){
	echo "An error occured"
	clear_tmprbs
}



clear ; internet && pimp_pacman && refresh_keyrings && install_yay && install_progs && clear_tmprbs || remove_all













#############################################################################
# Old script

read -p "Enter the username of your account: " name
read -sp "Enter a password for your account: " pass1
printf '\n'
read -sp "Retype your password: " pass2
printf '\n'

while [ $pass1 != $pass2 ]
do
	read -sp "Passwords do not match. Enter your password again: " pass1
	printf '\n'
	read -sp "Retype your password: " pass2
	printf '\n'
done

echo -e "Adding user "$name""
useradd -m -g wheel -s /bin/bash $name >/dev/tty6
echo "$name:$pass1" | chpasswd >/dev/tty6


echo "Getting program list..."
curl https://raw.githubusercontent.com/Rhylx/RBS/master/progs.csv > /tmp/progs.csv
rm /tmp/aur_queue &>/dev/tty6
count=$(cat /tmp/progs.csv | wc -l)
n=0
installProgram() { ( (pacman --noconfirm --needed -S $1 &>/dev/tty6 && echo $1 installed.) || echo $1 >> /tmp/aur_queue) || echo $1 >> /tmp/rbs_failed ;}

for x in $(cat /tmp/progs.csv | awk -F, {'print $1'})
do
	n=$((n+1))
	echo "Downloading and installing program $n out of $count: $x..."
	echo "The first programs will take more time due to dependencies. You can watch the output on tty6."
	printf '\n'
	printf '\n'
	installProgram $x >/dev/tty6
done

echo "Preparing the user script (sudoers)..."
curl https://raw.githubusercontent.com/Rhylx/RBS/master/sudoers_installation > /etc/sudoers
cd /tmp
curl https://raw.githubusercontent.com/Rhylx/RBS/master/rbs_user > /tmp/rbs_user
sudo -u $name bash /tmp/rbs_user
rm -f /tmp/rbs_user

echo "Initialising git "
git config --global user.email "redbull11570@gmail.com"
git config --global user.name "Rhylx"

echo "Installing st from source..."
cd /tmp
rm -rf st
git clone --depth 1 https://github.com/Rhylx/st.git
cd st
make
make install
cd /tmp

echo "Initialising shortcut-sync"
/home/$(whoami)/.scripts/shortcuts.sh

echo "Enabling Network Manager..."
systemctl enable NetworkManager
systemctl start NetworkManager

echo "Enabling i8kutils for fan..."
echo "set config(auto)	1" >> /etc/i8kutils/i8kmon.conf
systemctl enable i8kmon
systemctl start i8kmon

echo "Configuring lux for brightness..."
lux

echo "Getting rid of that retarded error beep sound..."
rmmod pcspkr
echo "blacklist pcspkr" > /etc/modprobe.d/nobeep.conf
echo " Updating sudoers ( end of installation ): "
curl https://raw.githubusercontent.com/Rhylx/RBS/master/sudoers > /etc/sudoers

echo "Installation finished. To start i3, run command : startx"
