#!/bin/sh

# This is the main script of RBS : it will auto-install and configure all programs that I daily use
# Thanks to this webpage (http://xn--rpa.cc/irl/term.html), I'm able to use ANSI escape sequences.

# Is first meant for arch, but will then be extended to void and debian
# Goal of this script :
#
# -> Install keyboard layout
# -> Installing dotfiles (which of course need to be reviewed and updated...)


mkdir /tmp/tmprbs
read -p "Which aurhelper would you like to install (default is yay): " aurhelper


[ -z "$aurhelper" ] && aurhelper="yay"

internet()
{
	echo "Testing internet connection..."
	ping -c 2 www.example.com 2>&- >/dev/null || (echo "You're not connected to the internet. Check out that NetworkManager is started" && false)
}

pimp_pacman(){
	grep "^Color" /etc/pacman.conf >/dev/null || sudo sed -i "s/^#Color$/Color/" /etc/pacman.conf
	sudo sed -i "s/-j2/-j$(nproc)/;s/^#MAKEFLAGS/MAKEFLAGS/" /etc/makepkg.conf
}

refresh_keyrings(){
	echo "Refreshing keyrings..."
	sudo pacman --noconfirm --needed -Sy archlinux-keyring >/dev/null 2>&1
}

install_yay(){
	[ -f "/usr/bin/$aurhelper" ] || (
	echo "Manually installing ${aurhelper}, this may take several minutes..."
	cd /tmp/tmprbs
	rm -rf /tmp/tmprbs/"$aurhelper"*
	curl -sO https://aur.archlinux.org/cgit/aur.git/snapshot/"$aurhelper".tar.gz &&
	tar -xvf "$aurhelper".tar.gz >/dev/null 2>&1 &&
	cd "$aurhelper" &&
	makepkg --noconfirm -si >/dev/null 2>&1
	cd /tmp/tmprbs)
}

# 3 escape seq meaning: back 12 columns, erase end of line and then write in bold  and green [DONE] and go back to the line
writing_bold_green(){
	printf "\e[12D\e[K\e[1;38;5;48m[DONE]\e[m\n"
}

writing_bold_red(){
	printf "\e[12D\e[K\e[1;38;5;196m[ERROR]\e[m\n"
}

installer(){
	install_mess="Installing $1... "
	printf '%s%*s' "$install_mess" "$((($(tput cols) / 2) - ${#install_mess}))"
	printf "[INSTALLING]"
	sudo pacman --noconfirm --needed -S "$1" >/dev/null 2>&1 && writing_bold_green || writing_bold_red
}

aur_installer(){
	pacman -Qqm | grep "^$1$" >/dev/null 2>&1 && return
	install_mess="Installing $1... "
	printf '%s%*s' "$install_mess" "$((($(tput cols) / 2) - ${#install_mess}))"
	printf "[INSTALLING]"
	$aurhelper --noconfirm -S "$1" >/dev/null 2>&1 && writing_bold_green || writing_bold_red

}

make_git_inst(){
	pname="$(basename $1)"
	install_mess="Installing ${pname}... "
	printf '%s%*s' "$install_mess" "$((($(tput cols) / 2) - ${#install_mess}))"
	printf "[INSTALLING]"
	cd /tmp/tmprbs
	sudo git clone --depth 1 $1 >/dev/null 2>&1
	cd $pname
	make >/dev/null 2>&1
	sudo make install >/dev/null 2>&1 && writing_bold_green || writing_bold_red
}

install_progs(){
	while IFS=, read -r tag prog comment; do
		case "$tag" in
			"A") aur_installer $prog ;;
			"G") make_git_inst $prog ;;
			*) installer $prog ;;
		esac
	done < progs.csv
}

manually_inst_dwm(){
	install_mess="Installing dwm... "
	printf '%s%*s' "$install_mess" "$((($(tput cols) / 2) - ${#install_mess}))"
	printf "[INSTALLING]"
	cd /tmp/tmprbs
	sudo git clone --depth 1 https://github.com/LukeSmithxyz/dwm >/dev/null 2>&1
	cd dwm
	sudo sed -i "/\/share\/dwm/d" Makefile
	make >/dev/null 2>&1
	sudo make install >/dev/null 2>&1 && writing_bold_green || writing_bold_red
}

remove_noise(){
	echo "Removing the beep sound..."
	sudo rmmod pcspkr
	echo "blacklist pcspkr" | sudo tee /etc/modprobe.d/nobeep.conf >/dev/null
}

insert_dotfiles(){
	echo "Inserting dotfiles..."
	cd /tmp/tmprbs
	sudo git clone --depth 1 https://github.com/Rhylx/temp_dotfiles  >/dev/null 2>&1
	sudo cp -rf temp_dotfiles/ ~/ >/dev/null 2>&1
	cd ~
	rm -rf .git
	rm -f README.md
}

clear_tmprbs(){
	sudo rm -rf /tmp/tmprbs >/dev/null 2>&1
	echo "Setting back sudoers to normal..."
	echo "%wheel ALL=(ALL) ALL
%wheel ALL=(ALL) NOPASSWD: /usr/bin/shutdown,/usr/bin/poweroff,/usr/bin/reboot,/usr/bin/systemctl suspend,/usr/bin/mount,/usr/bin/umount,/usr/bin/pacman -Syu,/usr/bin/pacman -Syyu,/usr/bin/systemctl restart NetworkManager,/usr/bin/pacman -Syyu --noconfirm,/usr/bin/loadkeys,/usr/bin/yay
%wheel ALL=(ALL) NOPASSWD: ALL #RBS" | sudo tee -a /etc/sudoers >/dev/null
	sudo sed -i "/#RBS/d" /etc/sudoers
}

remove_all(){
	echo "An error occured"
	clear_tmprbs
}



clear ; internet && pimp_pacman && refresh_keyrings && install_yay && install_progs && manually_inst_dwm && remove_noise && insert_dotfiles && clear_tmprbs || remove_all

# Main structure of script is finished for arch. Now, there remains to rebuild all soft and config files # and to add then slowly in prog.csv...

## Also to do : adapt this script to void and debian...

