#!/bin/sh

# This is the main script of RBS : it will auto-install and configure all programs that I daily use

# Is first meant for arch, but will then be extended to void and debian
# Goal of this script :
#
# -> Install all programs from prog.csv:
#       graphically try to do something like \green{INSTALLATION CONFIRMED}/\red{ERROR} for each soft
# -> Install keyboard layout
# -> Installing dotfiles (which of course need to be reviewed and updated...)
# -> Setup doas (instead of sudo)
# Try to do these steps manually and write it all again...


mkdir /tmp/tmprbs
read -p "Which aurhelper would you like to install (default is yay): " aurhelper


[ -z "$aurhelper" ] && aurhelper="yay"

internet()
{
	echo "Testing internet connection..."
	ping -c 2 www.example.com 2>&- >/dev/null || (echo "You're not connected to the internet. Check out that NetworkManager is started" && false)
}

pimp_pacman(){
	grep "^Color" /etc/pacman.conf >/dev/null || sed -i "s/^#Color$/Color/" /etc/pacman.conf
}

refresh_keyrings(){
	echo "Refreshing keyrings..."
	sudo pacman --noconfirm --needed -Sy archlinux-keyring >/dev/null 2>&1
}

install_yay(){
	[ -f "/usr/bin/$aurhelper" ] || (
	echo "Manually installing $aurhelper ..."
	cd /tmp/tmprbs
	rm -rf /tmp/tmprbs/"$aurhelper"*
	curl -sO https://aur.archlinux.org/cgit/aur.git/snapshot/"$aurhelper".tar.gz &&
	tar -xvf "$aurhelper".tar.gz >/dev/null 2>&1 &&
	cd "$aurhelper" &&
	makepkg --noconfirm -si >/dev/null 2>&1
	cd /tmp/tmprbs)
}

# Thanks to this webpage (http://xn--rpa.cc/irl/term.html), I'm able to use ANSI escape sequences.
writing_bold_green(){
	printf "\e[12D\e[K\e[1;38;5;48m[DONE]\e[m\n" # 3 escape seq meaning: back 12 columns,
						     # erase end of line and then write in bold
						     # and green [DONE] and go back to the line
}

writing_bold_red(){
	printf "\e[12D\e[K\e[1;38;5;196m[ERROR]\e[m\n"
}

installer(){
	install_mess="Installing $1 ... "
	printf '%s%*s' $install_mess "$((($(tput cols) / 2) - ${#install_mess}))"
	printf "[INTALLING]"
	sudo pacman --noconfirm --needed -S "$1" >/dev/null 2>&1 && writing_bold_green || writing_bold_red
}

aur_installer(){
	pacman -Qqm | grep "^$1$" >/dev/null 2>&1 && return
	install_mess="Installing $1 ... "
	printf '%s%*s' $install_mess "$((($(tput cols) / 2) - ${#install_mess}))"
	printf "[INSTALLING]"
	$aurhelper --noconfirm -S "$1" >/dev/null 2>&1 && writing_bold_green || writing_bold_red

}

install_progs(){
	while IFS=, read -r tag prog comment; do
		case "$tag" in
			"A") aur_installer $prog ;;
			*) installer $prog ;;
		esac
	done < progs.csv
}












clear_tmprbs(){
	sudo rm -rf /tmp/tmprbs >/dev/null 2>&1
}


remove_all(){
	echo "An error occured"
	clear_tmprbs
}



clear ; internet && pimp_pacman && refresh_keyrings && install_yay && install_progs && clear_tmprbs || remove_all


